// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro

#define NAV_L 1
#define FN_L 2
#define NUM_L 3
#define SYM_L 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ye {
            bindings = <&kp SQT>;
            key-positions = <1 2>;
            timeout-ms = <40>;
            layers = <0>;
        };

        yo {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
            timeout-ms = <40>;
        };

        h {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
            timeout-ms = <40>;
            layers = <0>;
        };

        b {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            timeout-ms = <40>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W       &kp E       &kp R         &kp T              &kp Y           &kp U            &kp I       &kp O       &kp P
&hm LCTRL A  &hm LALT S  &hm LGUI D  &hm LSHFT F   &kp G              &kp H           &hm LSHFT J      &hm LGUI K  &hm LALT L  &hm LCTRL SEMI
&kp Z        &kp X       &kp C       &kp V         &kp B              &kp N           &kp M            &kp COMMA   &kp DOT     &kp FSLH
                                     &lt FN_L ESC  &lt NAV_L SPACE    &lt NUM_L BSPC  &lt SYM_L ENTER
            >;
        };

        nav_layer {
            bindings = <
&trans     &trans    &trans    &trans      &trans    &trans    &trans     &trans     &trans     &trans
&kp LCTRL  &kp LALT  &kp LGUI  &kp LSHIFT  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp INS
&trans     &trans    &trans    &trans      &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp DEL
                               &trans      &trans    &kp TAB   &kp ENTER
            >;
        };

        fn_layer {
            bindings = <
&trans     &trans    &trans    &trans      &bootloader    &trans           &kp F1  &kp F2   &kp F3   &kp F4
&kp LCTRL  &kp LALT  &kp LGUI  &kp LSHIFT  &trans         &trans           &kp F5  &kp F6   &kp F7   &kp F8
&trans     &trans    &trans    &trans      &trans         &kp PRINTSCREEN  &kp F9  &kp F10  &kp F11  &kp F12
                               &trans      &trans         &trans           &trans
            >;
        };

        num_layer {
            bindings = <
&trans  &kp N7  &kp N8  &kp N9  &trans    &bootloader  &trans      &trans    &trans    &trans
&trans  &kp N4  &kp N5  &kp N6  &trans    &trans       &kp LSHIFT  &kp LGUI  &kp LALT  &kp LCTRL
&trans  &kp N1  &kp N2  &kp N3  &trans    &trans       &trans      &trans    &trans    &trans
                        &trans  &kp N0    &trans       &trans
            >;
        };

        symbols_layer {
            bindings = <
&kp LEFT_BRACKET  &kp LS(N7)  &kp LS(N8)  &kp RIGHT_BRACKET         &kp BACKSLASH                &trans     &kp LS(N3)  &kp LS(N6)  &trans    &trans
&kp GRAVE         &kp LS(N4)  &kp LS(N5)  &kp MINUS                 &kp EQUAL                    &kp SPACE  &kp LSHIFT  &kp LGUI    &kp LALT  &kp LEFT_CONTROL
&kp COMMA         &kp SQT     &kp LS(N2)  &kp PERIOD                &kp LS(N1)                   &trans     &trans      &trans      &trans    &trans
                                          &kp LS(LEFT_PARENTHESIS)  &kp LS(RIGHT_PARENTHESIS)    &trans     &trans
            >;
        };
    };
};
